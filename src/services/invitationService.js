/* eslint-disable no-useless-catch */
import { StatusCodes } from 'http-status-codes'
import ApiError from '~/utils/ApiError'
import { userModel } from '~/models/userModel'
import { boardModel } from '~/models/boardModel'
import { invitationModel } from '~/models/invitationModel'
import { INVITATION_TYPES, BOARD_INVITATION_STATUS } from '~/utils/constants'
import { pickUser } from '~/utils/formatter'

const createNewBoardInvitation = async (reqBody, inviterId) => {
  try {
    // Inviter: ch√≠nh l√† ng∆∞·ªùi ƒëang request, n√™n ch√∫ng ta t√¨m theo id l·∫•y t·ª´ token
    const inviter = await userModel.findOneById(inviterId)
    // Invitee: l·∫•y theo email nh·∫≠n t·ª´ ph√≠a FE
    const invitee = await userModel.findOneByEmail(reqBody.inviteeEmail)
    // T√¨m lu√¥n c√°i board ra ƒë·ªÉ l·∫•y data x·ª≠ l√Ω
    const board = await boardModel.findOneById(reqBody.boardId)

    // N·∫øu kh√¥ng t·ªìn t·∫°i 1 trong 3 th√¨ c·ª© th·∫≥ng tay reject
    if (!invitee || !inviter || !board) {
      throw new ApiError (StatusCodes.NOT_FOUND, 'Inviter, Invitee or Board not found!')
    }

    const newInvitationData = {
      inviterId,
      inviteeId: invitee._id.toString(), // chuy·ªÉn t·ª´ ObjectId v·ªÅ String v√¨ sang b√™n Model c√≥ check l·∫°i
      type: INVITATION_TYPES.BOARD_INVITATION,
      boardInvitation: {
        boardId: board._id.toString(),
        status: BOARD_INVITATION_STATUS.PENDING
      }
    }
    // G·ªçi sang Model ƒë·ªÉ l∆∞u v√†o DB
    const createdInvitation = await invitationModel.createNewBoardInvitation(newInvitationData)
    const getInvitation = await invitationModel.findOneById(createdInvitation.insertedId)

    // Ngo√†i th√¥ng tin c·ªßa c√°i board invitation m·ªõi t·∫°o th√¨ tr·∫£ v·ªÅ ƒë·ªß c·∫£ lu√¥n board, inviter, invitee
    const resInvitation = {
      ...getInvitation,
      board,
      inviter: pickUser(inviter),
      invitee: pickUser(invitee)
    }
    return resInvitation
  } catch (error) { throw error}
}

const getInvitations = async (userId) => {
  try {
    const getInvitations = await invitationModel.findByUser(userId)
    // console.log('üöÄ ~ getInvitations ~ getInvitations:', getInvitations)
    const resInvitations = getInvitations.map(i => {
      return {
        ...i,
        inviter: i?.inviter[0] || {},
        invitee: i?.invitee[0] || {},
        board: i?.board[0] || {}
      }
    })

    return resInvitations
  } catch (error) { throw error }
}

const updateBoardInvitation = async (userId, invitationId, status) => {
  try {
    // T√¨m b·∫£n ghi invitation trong model
    const getInvitation = await invitationModel.findOneById(invitationId)
    if (!getInvitation) throw new ApiError (StatusCodes.NOT_FOUND, 'Invitation not found!')

    // Sau khi c√≥ Invitation r·ªìi th√¨ l·∫•y full th√¥ng in board
    const boardId = getInvitation.boardInvitation.boardId
    const getBoard = await boardModel.findOneById(boardId)
    if (!getBoard) throw new ApiError (StatusCodes.NOT_FOUND, 'Board not found!')

    // Ki·ªÉm tra xem n·∫øu status l√† ACCEPTED join board m√† c√°i th·∫±ng user (invitee) ƒë√£ l√† owner ho·∫∑c member c·ªßa board r·ªìi th√¨ tr·∫£ v·ªÅ th√¥ng b√°o l·ªói lu√¥n.
    // Note: 2 m·∫£ng memberIds v√† ownerIds c·ªßa board n√≥ ƒëang l√† ki·ªÉu d·ªØ li·ªáu ObjectId n√™n cho n√≥ v·ªÅ String h·∫øt lu√¥n ƒë·ªÉ check
    const boardOwnerAndMemberIds = [...getBoard.ownerIds, ...getBoard.memberIds].toString()
    if (status === BOARD_INVITATION_STATUS.ACCEPTED && boardOwnerAndMemberIds.includes(userId)) {
      throw new ApiError (StatusCodes.NOT_ACCEPTABLE, 'You are already a member of this board!')
    }

    // t·∫°o d·ªØ li·ªáu ƒë·ªÉ update b·∫£n ghi Invitation
    const updateData = {
      boardInvitation: {
        ...getInvitation.boardInvitation,
        status: status
      }
    }

    // B∆∞·ªõc 1: C·∫≠p nh·∫≠t status trong b·∫£n ghi Invitation
    const updatedInvitaton = await invitationModel.update(invitationId, updateData)

    // B∆∞·ªõc 2: N·∫øu tr∆∞·ªùng h·ª£p Accept m·ªôt l·ªùi m·ªùi th√†nh c√¥ng, th√¨ c·∫ßn ph·∫£i th√™m th√¥ng tin c·ªßa th·∫±ng user (userId) v√†o b·∫£n ghi memberIds trong collection board.
    if (updatedInvitaton.boardInvitation.status === BOARD_INVITATION_STATUS.ACCEPTED) {
      await boardModel.pushMemberIds(boardId, userId)
    }

    return updatedInvitaton
  } catch (error) { throw error }
}

export const invitationService = {
  createNewBoardInvitation,
  getInvitations,
  updateBoardInvitation
}